# Cline コーディング規約

## ドキュメント・セットアップ手順
- Unityエディタでのセットアップ手順は必ずSETUP_TODO.mdに記載すること
- SETUP_TODO.mdの内容は常に最新状態に保つこと

## 基本ルール
- インデントには4つのスペースを使用する（タブは使用しない）
- 行の最大長は120文字とする
- ファイル末尾には改行を入れる
- 末尾の空白は削除する

## 命名規則
- クラス名: PascalCase (例: PlayerController)
- メソッド名: PascalCase (例: CalculateDamage)
- 変数名: camelCase (例: playerHealth)
- プライベートフィールド: _camelCase (例: _playerScore)
- 定数: UPPER_SNAKE_CASE (例: MAX_PLAYER_COUNT)
- インターフェース: IPascalCase (例: IInteractable)

## コメント
- 公開APIには必ずXMLドキュメントコメントを付ける
- コードの複雑な部分には説明コメントを追加する
- TODOコメントには担当者と期限を記載する (例: // TODO(username): 2025-05-01までに実装)

## クラス構造
- 一つのファイルには一つのクラスのみを定義する
- メンバーの順序:
  1. 定数
  2. フィールド
  3. プロパティ
  4. コンストラクタ
  5. メソッド

## ブレース
- 開始ブレースは同じ行に配置する
- 閉じブレースは新しい行に配置する

## 条件文
- 単一行の条件文でもブレースを使用する
- null チェックには ?? 演算子や null 条件演算子 (?.) を積極的に使用する

## ループ
- foreach を優先して使用する
- 複雑なループ内では早期リターンを活用する

## 例外処理
- 例外は適切に処理し、ユーザーフレンドリーなメッセージを表示する
- 例外をキャッチする場合は具体的な例外型を指定する

## Unity固有のルール
- MonoBehaviour のライフサイクルメソッドは正しい順序で配置する
- SerializeField 属性を使用してインスペクタから設定可能な変数を定義する
- 固定値の変数は必ず[SerializeField]を付けてエディタ上から編集できるようにする
- コルーチンの命名には Coroutine サフィックスを使用する (例: MovePlayerCoroutine)
- エディタ拡張コードは適切な名前空間内に配置する

## パフォーマンス
- Update メソッド内での処理は最小限に抑える
- 不要なガベージコレクションを避けるため、オブジェクトの生成は最小限にする
- 重い処理はコルーチンや Job System を使用して分散させる

## バージョン管理
- コミットメッセージは明確で簡潔に記述する
- 機能追加、バグ修正、リファクタリングなどの目的をコミットメッセージに含める
